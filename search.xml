<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>注解</title>
      <link href="/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Annotation/"/>
      <url>/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Annotation/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是注解？"><a href="#1-什么是注解？" class="headerlink" title="1.什么是注解？"></a>1.什么是注解？</h2><p>注解(Annotation)是代码里的特殊标记，这些标记可以在编译、类加载、运行时被读取，并执行相应的处理。</p><h2 id="2-为什么要用注解？"><a href="#2-为什么要用注解？" class="headerlink" title="2.为什么要用注解？"></a>2.为什么要用注解？</h2><ul><li><p>在JavaSE中，注解的使用目的比较简单，比如：标记过时的功能、忽略警告等。</p><span id="more"></span></li><li><p>在Javaweb中，传统方式我们是通过配置文件(xml文件)来告诉类是如何运行的，有了注解技术后，我们通过注解告诉类如何运行。</p></li><li><p>未来的开发模式都是基于注解的，JPA、Spring、Hibernate、Struts都是基于注解的，注解是一种趋势，一定程度上可以说：框架 = 注解 + 反射 + 设计模式</p></li></ul><h2 id="3-怎么使用注解？"><a href="#3-怎么使用注解？" class="headerlink" title="3.怎么使用注解？"></a>3.怎么使用注解？</h2><ul><li>在前面增加@符号，并把该Annotation当成一个修饰符使用，可用于修饰包、类、构造器、方法、成员变量、参数、局部变量的声明</li><li>示例一：生成文档相关的注解<ul><li>@author 标明开发该类模块的作者，多个作者之间使用,分割 </li><li>@version 标明该类模块的版本 </li><li>@see 参考转向，也就是相关主题 </li><li>@since 从哪个版本开始增加的 </li><li>@param 对方法中某参数的说明，如果没有参数就不能写 </li><li>@return 对方法返回值的说明，如果方法的返回值类型是void就不能写 </li><li>@exception 对方法可能抛出的异常进行说明 ，如果方法没有用throws显式抛出的异常就不能写 </li><li>其中 <ul><li>@param @return 和 @exception 这三个标记都是只用于方法的。 </li><li>@param的格式要求：@param 形参名 形参类型 形参说明 </li><li>@return 的格式要求：@return 返回值类型 返回值说明</li><li>@exception的格式要求：@exception 异常类型 异常说明 </li><li>@param和@exception可以并列多个</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span> Math.java</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavadocTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 程序的主方法，程序的入口</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> args String[] 命令行参数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 求圆面积的方法</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> radius double 半径值</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> double 圆的面积</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">(<span class="keyword">double</span> radius)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>示例二：在编译时进行格式检查<ul><li>@Override: 限定重写父类方法, 该注解只能用于方法 </li><li>@Deprecated: 用于表示所修饰的元素(类, 方法等)已过时。通常是因为 所修饰的结构危险或存在更好的选择 </li><li>@SuppressWarnings: 抑制编译器警告</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;过时的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;重写的toString方法()&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>示例三：代替配置文件功能<ul><li>@WebServlet</li><li>@Transactional</li></ul></li></ul><h2 id="4-自定义注解"><a href="#4-自定义注解" class="headerlink" title="4.自定义注解"></a>4.自定义注解</h2><ul><li>一般自定义注解都是RUNTIME级别的，因为大多数情况是根据运行时环境去做一些处理</li><li>在开发的过程中，自定义注解需要配合反射来使用，因为反射是Java获取运行时信息的重要手段</li><li>定义新的 Annotation 类型使用 @interface 关键字 </li><li>自定义注解自动继承了java.lang.annotation.Annotation接口 </li><li>Annotation 的成员变量在 Annotation 定义中以无参数方法的形式来声明。其方法名和返回值定义了该成员的名字和类型。我们称为配置参数。类型只能是八种基本数据类型、String类型、Class类型、enum类型、Annotation类型、 以上所有类型的数组。 </li><li>可以在定义 Annotation 的成员变量时为其指定初始值, 指定成员变量的初始 值可使用 default 关键字 </li><li>如果只有一个参数成员，建议使用参数名为value</li><li>如果定义的注解含有配置参数，那么使用时必须指定参数值，除非它有默认 值。格式是“参数名 = 参数值” ，如果只有一个参数成员，且名称为value， 可以省略“value=”</li><li>没有成员定义的 Annotation 称为标记; 包含成员变量的 Annotation 称为元数据 Annotation </li><li>注意：自定义注解必须配上注解的信息处理流程才有意义。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MyAnnotation(value=&quot;灰橙&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAnnotationTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class clazz = MyAnnotationTest.class;</span><br><span class="line">        Annotation a = clazz.getAnnotation(MyAnnotation.class);</span><br><span class="line">        MyAnnotation m = (MyAnnotation) a;</span><br><span class="line">        String info = m.value();</span><br><span class="line">        System.out.println(info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line"><span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;greyorange&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-JDK中的元注解"><a href="#5-JDK中的元注解" class="headerlink" title="5.JDK中的元注解"></a>5.JDK中的元注解</h2><ul><li><p>自定义的注解是可以带成员变量的，定义带成员变量的注解叫做元数据Annotation</p></li><li><p>JDK 的元 Annotation 用于修饰其他 Annotation 定义</p></li><li><p>JDK5.0提供了4个标准的元注解（meta-Annotation）类型</p><ul><li><p>@Retention：只能用于修饰一个 Annotation 定义, 用于指定该Annotation 的生命周期, @Rentention 包含一个 RetentionPolicy 类型的成员变量, 使用 @Rentention 时必须为该 value 成员变量指定值</p><ul><li>RetentionPolicy.SOURCE：在源文件中有效（即源文件保留），编译器直接丢弃这种策略的注释 </li><li>RetentionPolicy.CLASS：在class文件中有效（即class保留）， 当运行 Java 程序时, JVM 不会保留注解。 这是默认值 </li><li>RetentionPolicy.RUNTIME：在运行时有效（即运行时保留），当运行 Java 程序时, JVM 会保留注释。程序可以通过反射获取该注释。</li><li><img src="http://img.greyorange.top/typora_img/image-20210808201430033.png?imageMogr2/blur/1x0/quality/75%7Cwatermark/2/text/QEdyZXlPcmFuZ2U=/font/Y29taWMgc2FucyBtcw==/fontsize/720/fill/I0ZGRkZGRg==/dissolve/90/gravity/SouthEast/dx/10/dy/10" alt="image-20210808201430033"></li></ul></li><li><p>Target：用于修饰 Annotation 定义, 用于指定被修饰的 Annotation 能用于修饰哪些程序元素。 @Target 也包含一个名为 value 的成员变量。</p><p><img src="http://img.greyorange.top/typora_img/image-20210808201521993.png?imageMogr2/blur/1x0/quality/75%7Cwatermark/2/text/QEdyZXlPcmFuZ2U=/font/Y29taWMgc2FucyBtcw==/fontsize/720/fill/I0ZGRkZGRg==/dissolve/90/gravity/SouthEast/dx/10/dy/10" alt="image-20210808201521993"></p></li><li><p>Documented：用于指定被该元 Annotation 修饰的 Annotation 类将被 javadoc 工具提取成文档。默认情况下，javadoc是不包括注解的。另外，定义为Documented的注解必须设置Retention值为RUNTIME。</p></li><li><p>Inherited：被它修饰的 Annotation 将具有继承性。如果某个类使用了被 @Inherited 修饰的 Annotation, 则其子类将自动具有该注解。实际应用中，使用较少。</p></li></ul></li></ul><h2 id="6-JDK8中注解的新特性"><a href="#6-JDK8中注解的新特性" class="headerlink" title="6.JDK8中注解的新特性"></a>6.JDK8中注解的新特性</h2><ul><li>可重复的注解@Repeatable</li><li>可用于类型的注解<ul><li>JDK1.8之后，关于元注解@Target的参数类型ElementType枚举值多了两个： TYPE_PARAMETER,TYPE_USE。 </li><li>在Java 8之前，注解只能是在声明的地方所使用，Java8开始，注解可以应用 在任何地方。 </li><li>ElementType.TYPE_PARAMETER 表示该注解能写在类型变量的声明语 句中（如：泛型声明）。</li><li>ElementType.TYPE_USE 表示该注解能写在使用类型的任何语句中。</li></ul></li></ul><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h2><p>1）注解两个作用：</p><ul><li>让编译器检查代码</li><li>将数据注入到方法、成员变量、类上</li></ul><p>2）在JDK中注解分为了</p><ul><li>基本Annotation：在lang包下，常用于标记该方法，抑制编译器警告等</li><li>元Annotation：在annotation包下，常用于修饰其他的Annotation定义</li></ul><p>3）注入对象的步骤：得到想要注入的对象属性，通过属性得到注解的信息，通过属性的写方法将注解的信息注入到对象上，最后将对象赋给类。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode第一轮(更新ing)</title>
      <link href="/LeetCode/LeetCode%E7%AC%AC%E4%B8%80%E8%BD%AE(%E6%9B%B4%E6%96%B0ing)/"/>
      <url>/LeetCode/LeetCode%E7%AC%AC%E4%B8%80%E8%BD%AE(%E6%9B%B4%E6%96%B0ing)/</url>
      
        <content type="html"><![CDATA[<p>记录了下自己用Java语言第一轮刷LeetCode的章节顺序，顺便会贴一些自己对每道题的思路与代码。</p><span id="more"></span><h2 id="chap1-二分查找"><a href="#chap1-二分查找" class="headerlink" title="chap1 二分查找"></a>chap1 二分查找</h2><h2 id="chap2-排序算法"><a href="#chap2-排序算法" class="headerlink" title="chap2 排序算法"></a>chap2 排序算法</h2><h2 id="chap3-滑动窗口与双指针"><a href="#chap3-滑动窗口与双指针" class="headerlink" title="chap3 滑动窗口与双指针"></a>chap3 滑动窗口与双指针</h2><h2 id="chap4-链表"><a href="#chap4-链表" class="headerlink" title="chap4 链表"></a>chap4 链表</h2><h2 id="chap5-栈"><a href="#chap5-栈" class="headerlink" title="chap5 栈"></a>chap5 栈</h2><h2 id="chap6-队列"><a href="#chap6-队列" class="headerlink" title="chap6 队列"></a>chap6 队列</h2><h2 id="chap7-优先队列"><a href="#chap7-优先队列" class="headerlink" title="chap7 优先队列"></a>chap7 优先队列</h2><h2 id="chap8-树"><a href="#chap8-树" class="headerlink" title="chap8 树"></a>chap8 树</h2><h2 id="chap9-回溯"><a href="#chap9-回溯" class="headerlink" title="chap9 回溯"></a>chap9 回溯</h2><h2 id="chap10-动态规划"><a href="#chap10-动态规划" class="headerlink" title="chap10 动态规划"></a>chap10 动态规划</h2><h2 id="chap11-贪心"><a href="#chap11-贪心" class="headerlink" title="chap11 贪心"></a>chap11 贪心</h2><h2 id="chap12-哈希表"><a href="#chap12-哈希表" class="headerlink" title="chap12 哈希表"></a>chap12 哈希表</h2>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
